// @title Auto Messaging API
// @version 1.0
// @description This is a REST API for automatic message processing
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1
// @schemes http

package main

import (
	"auto-messaging/config"
	_ "auto-messaging/docs" // docs is generated by Swag CLI
	"auto-messaging/internal/client"
	"auto-messaging/internal/controller"
	"auto-messaging/internal/handler"
	"auto-messaging/internal/repository"
	"auto-messaging/internal/router"
	"auto-messaging/pkg/cache"
	"log"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title Auto Messaging API
// @version 1.0
// @description This is a REST API for automatic message processing
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /api/v1
// @schemes http

func main() {
	// Initialize logger
	logger := log.New(os.Stdout, "[AutoMessaging] ", log.LstdFlags)

	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		logger.Fatalf("Failed to load config: %v", err)
	}

	// Debug log the loaded config
	logger.Printf("Loaded config - DB Host: %s, Port: %d, User: %s, Name: %s",
		cfg.DB.Host, cfg.DB.Port, cfg.DB.User, cfg.DB.Name)
	logger.Printf("Webhook URL: %s", cfg.Webhook.URL)

	// Initialize database
	db, err := repository.InitDB(cfg.DB)
	if err != nil {
		logger.Fatalf("Failed to initialize database: %v", err)
	}

	// Initialize cache
	messageCache := cache.NewRedisCache(
		cfg.Redis.Host,
		cfg.Redis.Port,
		cfg.Redis.Password,
		cfg.Redis.DB,
	)

	// Initialize webhook client
	webhookClient := client.NewWebhookClient(cfg.Webhook.URL, cfg.Webhook.AuthKey)

	// Initialize repository
	messageRepo := repository.NewMessageRepository(db)

	// Initialize controller
	messageController := controller.NewMessageController(messageRepo, webhookClient, messageCache, logger)

	// Start message processing automatically
	if err := messageController.Start(); err != nil {
		logger.Fatalf("Failed to start message processing: %v", err)
	}

	// Initialize handlers and router
	messageHandler := handler.NewMessageHandler(messageController)
	r := router.SetupRouter(messageHandler)

	// Add Swagger
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Start server in a goroutine
	port := strconv.Itoa(cfg.Server.Port)
	go func() {
		if err := r.Run(":" + port); err != nil {
			logger.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// Stop message processing
	if err := messageController.Stop(); err != nil {
		logger.Printf("Error stopping message processing: %v", err)
	}

	// Give some time for cleanup
	time.Sleep(2 * time.Second)
}
